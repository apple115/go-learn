package consistenthash

import (
	"hash/crc32"
	"strconv"
)

type Hash func(data []byte) uint32

type Map struct {
	hash     Hash
	replicas int // 虚拟节点倍数
	keys     []int
	hashMap  map[int]string
}

// New ...
func New(replices int, fn Hash) *Map {
	m := &Map{
		replicas: replices,
		hash:     fn,
		hashMap:  make(map[int]string),
	}
	if m.hash == nil {
		m.hash = crc32.ChecksumIEEE
	}
	return m
}

// Add ...
func (m *Map) Add(keys ...string) {
	for _, key := range keys {
		for i := 0; i < m.replicas; i++ {
				hash := int(m.hash([]byte(strconv.Itoa(i) + key)))
				m.keys = append(m.keys, hash)
				m.hashMap[hash]= key
		}

	}

}
